// Efficient version generated by Co-Pilot

export const buildBatches = (samples) => {
  // Count occurrences of each email
  const emailCounts = {};
  for (const sample of samples) {
    emailCounts[sample.email] = (emailCounts[sample.email] || 0) + 1;
  }

  // Number of batches needed is the max count for any email
  const batchCount = Math.max(...Object.values(emailCounts));
  const batches = Array.from({ length: batchCount }, () => []);
  // Track emails present in each batch
  const batchEmailSets = Array.from({ length: batchCount }, () => new Set());

  // Track next batch index for each email
  const emailNextBatch = {};

  for (const sample of samples) {
    // Find the next batch index for this email
    let idx = emailNextBatch[sample.email] || 0;

    // Find a batch that doesn't have this email
    while (batchEmailSets[idx].has(sample.email)) {
      idx = (idx + 1) % batchCount;
    }

    batches[idx].push(sample);
    batchEmailSets[idx].add(sample.email);
    emailNextBatch[sample.email] = (idx + 1) % batchCount;
  }

  return batches;
}
