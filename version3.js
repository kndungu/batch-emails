// Efficient version generated by Co-Pilot

export const buildBatches = (samples) => {
  // Count occurrences of each email
  const emailCounts = {};
  for (const sample of samples) {
    emailCounts[sample.email] = (emailCounts[sample.email] || 0) + 1;
  }

  // Number of batches needed is the max count for any email
  const batchCount = Math.max(...Object.values(emailCounts));
  const batches = Array.from({ length: batchCount }, () => []);

  // Track how many times we've seen each email
  const emailSeen = {};
  // Track next batch for unique emails (for round-robin)
  let uniqueBatchPointer = 0;

  for (const sample of samples) {
    if (emailCounts[sample.email] === 1) {
      // Unique email: assign in round-robin
      batches[uniqueBatchPointer].push(sample);
      uniqueBatchPointer = (uniqueBatchPointer + 1) % batchCount;
    } else {
      // Duplicate email: assign to batch based on occurrence
      const seen = emailSeen[sample.email] || 0;
      const batchIdx = seen % batchCount;
      batches[batchIdx].push(sample);
      emailSeen[sample.email] = seen + 1;
    }
  }

  return batches;
}
